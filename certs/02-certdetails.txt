Difference Between PrivateKeyEntry and trustedCertEntry in a Keystore
---------------------------------------------------------------------
Entry type: PrivateKeyEntry
-----------
    What It Means

    This entry contains both a private key and its associated certificate chain (public certificate + CA chain).
    It is used for SSL/TLS servers (e.g., Tomcat, Nginx) that require a private key to establish HTTPS connections.

Entry type: trustedCertEntry:
----------------------
    What It Means

    This entry contains only a public certificate (without a private key).
    It is used for trusted CA certificates (like root or intermediate certificates).
    It cannot be used for SSL/TLS server authentication because it lacks a private key.

Conclusion

    If you want to use a certificate for SSL, you must have a PrivateKeyEntry.
    If you only need to verify other certificates, a trustedCertEntry is enough.







Renewal of JKS Certs using keytool
==================================
--------------------------------------------------------------------------- 
1)View JKS (Java KeyStore)
    Check Existing Certificates
    ------------------------------
    $ keytool -list -v -keystore keystore.jks -storetype JKS
        If prompted, enter the keystore password.

2)Generate a New CSR (Certificate Signing Request)
    A Certificate Signing Request (CSR) is required to obtain a renewed SSL/TLS certificate from a Certificate Authority (CA). It contains information about the server and its public key.
    Method 1: Using keytool (Java KeyStore)
    ------------------------------------------
       If you are using a JKS keystore, generate a CSR using the existing private key stored in the keystore. 
       Identify the Alias
        $ keytool -list -keystore keystore.jks
            The alias is the name of the certificate entry in the keystore.
       Generate the CSR
        $ keytool -certreq -alias myalias -file mycsr.csr -keystore keystore.jks -keyalg RSA -keysize 2048 -sigalg SHA256withRSA
            -certreq → Creates a certificate signing request.
            -alias myalias → The alias of the certificate in the keystore.
            -file mycsr.csr → Specifies the output file name for the CSR.
            -keystore keystore.jks → Specifies the keystore file.
            -keyalg RSA → Uses RSA encryption.
            -keysize 2048 → Generates a 2048-bit key (recommended for security).
            -sigalg SHA256withRSA → Uses SHA-256 for signing.
        Verify the CSR
         $ cat mycsr.csr 
         Or use OpenSSL to check the CSR details:
         $ openssl req -text -noout -verify -in mycsr.csr
    Alternative Method: Using OpenSSL (Without keytool/JKS)
    ---------------------------------------------------------------------
    If you do not want to use keytool, you can generate the CSR and private key using OpenSSL.
    Generate a New Private Key
      If the private key is not stored in a keystore, generate a new one:  
        $ openssl genpkey -algorithm RSA -out myprivatekey.key -pkeyopt rsa_keygen_bits:2048
        or by using old Method
        $ openssl genrsa -out myprivatekey.key 2048
     Generate the CSR
        $ openssl req -new -key myprivatekey.key -out mycsr.csr -sha256
        You will be prompted to enter the following details:
            Country Name (2 letter code) [XX]: US
            State or Province Name (full name) []: California
            Locality Name (eg, city) []: Los Angeles
            Organization Name (eg, company) []: MyCompany
            Organizational Unit Name (eg, section) []: IT Department
            Common Name (e.g., server FQDN or YOUR name) []: myserver.com  //FQDN
            Email Address []: admin@myserver.com
            A challenge password []:
    Verify the CSR
         $ cat mycsr.csr 
         Or use OpenSSL to check the CSR details:
         $ openssl req -text -noout -verify -in mycsr.csr

3)Submit CSR to CA (Certificate Authority)
    Send mycsr.csr to a trusted CA (like DigiCert, GlobalSign, or your internal CA) for signing.
    The CA will provide the renewed certificate, typically in .cer or .crt format.
    
4)Verify the Issued Certificate
    $ openssl x509 -in newcert.crt -text -noout
        -noout → Prevents displaying the certificate content in Base64

5)Backup the Keystore 
    Using cp command take backup
    Delete the Existing Certificate
        $ keytool -delete -alias myalias -keystore keystore.jks
        This ensures that the new certificate can be imported without conflicts.

6)Import the CA Root and Intermediate Certificates
    Before importing the new certificate, ensure that the CA root and intermediate certificates are available.
    Import the Root CA certificate:
        $ keytool -import -trustcacerts -alias rootCA -file rootCA.crt -keystore keystore.jks
    Import the Intermediate CA certificate:
        $ keytool -import -trustcacerts -alias intermediateCA -file intermediateCA.crt -keystore keystore.jks

7)Replace the Old Certificate with the New One
    Now, import the new certificate into the keystore.
        $ keytool -import -trustcacerts -alias myalias -file newcert.crt -keystore keystore.jks
            -alias myalias → Use the same alias as the old certificate.
            -file newcert.crt → The renewed certificate from the CA.
            -keystore keystore.jks → The existing JKS file.

8)Verify the Updated Keystore
    To confirm that the new certificate is correctly imported:
        $ keytool -list -keystore keystore.jks -v

9)Restart Services

10)Test the Renewed Certificate
    $ openssl s_client -connect myserver.com:443 -showcerts



Renewal of PKCS12 Certs using keytool & openssl 
===============================================
--------------------------------------------------------------------------- 

Using Keytool to Renew a Certificate in PKCS12
-----------------------------------------------
1)Backup the Existing PKCS12 Keystore
  using cp command 
2)view details & delete the Old Certificate
    $ keytool -list -v -keystore keystore.p12 -storetype PKCS12
    $ keytool -delete -alias myalias -keystore keystore.p12 -storetype PKCS12
3)Import the New Certificate
    $ keytool -import -alias myalias -file newcert.crt -keystore keystore.p12 -storetype PKCS12
4)Verify the New Certificate
    $ keytool -list -v -keystore keystore.p12 -storetype PKCS12

Using OpenSSL to Renew a Certificate in PKCS12
----------------------------------------------
1)Backup the Existing PKCS12 Keystore
    using cp command
2)view details
    $ keytool -list -v -keystore keystore.p12 -storetype PKCS12
3)Create a New PKCS12 Keystore with the New Certificate
    OpenSSL doesn't directly manage Java keystores like keytool, but it can be used to create a new PKCS12 keystore with the new certificate.
    If you want to create a new PKCS12 keystore from the new certificate and key, use:
         $ openssl pkcs12 -export -in newcert.crt -inkey newkey.key -name "myalias" -out newkeystore.p12
            -export: Tells OpenSSL to create a PKCS12 keystore.
            -in newcert.crt: The new certificate to be included in the keystore.
            -inkey newkey.key: The private key associated with the new certificate.
            -name "myalias": The alias for the certificate in the keystore.
            -out newkeystore.p12: The new PKCS12 keystore file.
4)Verify the New PKCS12 Keystore
    $ openssl pkcs12 -info -in newkeystore.p12


Final Recommendation:
====================

    Use Keytool for managing PKCS12 keystores in Java environments. It is the native tool for managing Java keystores and allows easy import/export operations.
    Use OpenSSL when you want to directly handle certificates (especially if you're working with non-Java environments) and create new PKCS12 keystores.